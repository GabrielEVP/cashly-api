# =================================
# CASHLY API - Envir# Container Management Commands
# Production (default - uses Dockerfile for production):
# docker compose up --build
#
# Development (uses Dockerfile.dev):
# DOCKERFILE=Dockerfile.dev SPRING_PROFILES_ACTIVE=dev docker compose up --build
#
# Testing environment:
# docker compose --profile test up --buildbles
# =================================

# Docker Compose Profiles Configuration
# Available profiles: app, database, test
# Use comma-separated values for multiple profiles
# Examples:
# - "app,database" for production/development
# - "database" for database only
# - "test" for testing environment
APP_PROFILE=app
DATABASE_PROFILE=database
TEST_PROFILE=test

# Docker Configuration
DOCKERFILE=Dockerfile
COMPOSE_PROJECT_NAME=cashly-api

# Database Configuration (Production/Development)
DB_HOST=mysql
DB_PORT=3306
DB_NAME=mydatabase
DB_USER=myuser
DB_PASSWORD=secret
DB_ROOT_PASSWORD=verysecret

# Database URL (constructed from above variables)
DATABASE_URL=jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}

# JWT Configuration
JWT_SECRET=your-super-secret-jwt-key-here-at-least-256-bits-long-for-security
JWT_ACCESS_TOKEN_EXPIRATION=900000
JWT_REFRESH_TOKEN_EXPIRATION=604800000

# Application Configuration
# Options: dev, prod, test (default: prod for production)
SPRING_PROFILES_ACTIVE=prod
SERVER_PORT=8080

# Logging Configuration
LOG_LEVEL=INFO

# Security Configuration
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS
CORS_ALLOWED_HEADERS=*

# Test Database Configuration (when using test profile)
TEST_DB_HOST=mysql-test
TEST_DB_PORT=3307
TEST_DB_NAME=cashly_test
TEST_DB_USER=testuser
TEST_DB_PASSWORD=testpass
TEST_DB_ROOT_PASSWORD=testroot

# Container Management Commands
# Production (default - uses Dockerfile for production):
# docker compose --profile app up --build
#
# Development (uses Dockerfile.dev):
# DOCKERFILE=Dockerfile.dev SPRING_PROFILES_ACTIVE=dev docker compose --profile app up --build
#
# Database only:
# docker compose --profile database up -d
#
# Testing environment:
# docker compose --profile test up --build