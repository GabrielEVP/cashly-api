# GitLab CI/CD Pipeline for Cashly API
# Spring Boot application with Maven and Docker

variables:
  # Maven configuration
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  
  # Docker configuration
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  
  # Application configuration
  SPRING_PROFILES_ACTIVE: "test"

# Cache Maven dependencies
cache:
  paths:
    - .m2/repository/
    - target/

# Define pipeline stages
stages:
  - test
  - build
  - package
  - deploy

# Job templates
.maven_template: &maven_template
  image: maven:3.9.9-amazoncorretto-24
  before_script:
    - chmod +x ./mvnw
    - ./mvnw --version
    - java --version

.docker_template: &docker_template
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

# Pipeline Jobs

# 1. Test stage using Dockerfile.test
test:docker:
  <<: *docker_template
  stage: test
  script:
    - echo "Building test image with Dockerfile.test..."
    - docker build -f Dockerfile.test -t cashly-test:$CI_COMMIT_SHA .
    - echo "Running tests in Docker container..."
    - docker run --rm 
      -v /var/run/docker.sock:/var/run/docker.sock 
      -e TESTCONTAINERS_RYUK_DISABLED=true
      cashly-test:$CI_COMMIT_SHA
  after_script:
    - echo "Cleaning up test images..."
    - docker rmi cashly-test:$CI_COMMIT_SHA || true
  only:
    - merge_requests
    - main
    - develop

# 2. Build stage (optional compile check)
build:compile:
  <<: *maven_template
  stage: build
  script:
    - echo "Validating compilation..."
    - ./mvnw $MAVEN_CLI_OPTS clean compile -DskipTests
  artifacts:
    paths:
      - target/classes/
    expire_in: 1 hour
  only:
    - merge_requests
    - main
    - develop

# 3. Package stage using normal Dockerfile
package:jar:
  <<: *maven_template
  stage: package
  script:
    - echo "Creating JAR package..."
    - ./mvnw $MAVEN_CLI_OPTS clean package -DskipTests
  artifacts:
    paths:
      - target/*.jar
    expire_in: 1 week
  only:
    - main
    - develop
    - tags

package:docker:
  <<: *docker_template
  stage: package
  script:
    - echo "Building production Docker image with Dockerfile..."
    - docker build -f Dockerfile -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker build -f Dockerfile -t $CI_REGISTRY_IMAGE:latest .
    - echo "Pushing Docker image to registry..."
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  dependencies:
    - package:jar
  only:
    - main
    - develop
    - tags

# 4. Deploy stage
deploy:staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to staging environment..."
    - echo "Docker image ready: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    - echo "Configure your staging server to pull and run this image"
  environment:
    name: staging
    url: https://staging-api.yourdomain.com
  when: manual
  only:
    - develop

deploy:production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to production environment..."
    - echo "Docker image ready: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    - echo "Configure your production server to pull and run this image"
  environment:
    name: production
    url: https://api.yourdomain.com
  when: manual
  only:
    - main
    - tags

# Rules for when to run the pipeline
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_TAG